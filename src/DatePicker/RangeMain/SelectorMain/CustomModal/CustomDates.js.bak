import React from 'react'
import { validateMaxMin } from './../../../utils'
import validateStartEnd from './../../../utils/validateRange/validateValue/validateStartEnd'
import locale from './../../../../locale'
// 测试使用
// import locale from 'seedsui-react/lib/locale'

import Combo from './../../../Combo'

// 自定义日期选择弹窗: 两框选择
export default function CustomDates({
  portal,
  type,
  allowClear,
  value,
  min,
  max,
  onBeforeChange,
  onChange,
  onError,
  DatePickerModalProps
}) {
  // 开始和结束日期
  let startDate = Array.isArray(value) && value[0] instanceof Date ? value[0] : null
  let endDate = Array.isArray(value) && value[1] instanceof Date ? value[1] : null

  // 校验开始和结束时间
  function validateStartDate(newStartDate) {
    let newValue = validateMaxMin(newStartDate, {
      type: type,
      min: min,
      max: max,
      onError: onError
    })
    if (newValue === false) {
      return false
    }
    newValue = validateStartEnd([newStartDate, endDate], { type: type, onError: onError })
    if (newValue === false) {
      return false
    }
    return true
  }
  function validateEndDate(newEndDate) {
    let newValue = validateMaxMin(newEndDate, {
      type: type,
      min: min,
      max: max,
      onError: onError
    })
    if (newValue === false) {
      return false
    }
    newValue = validateStartEnd([startDate, newEndDate], { type: type, onError: onError })
    if (newValue === false) {
      return false
    }
    return true
  }

  // 修改值
  async function handleChange(newValue) {
    if (newValue.length !== 2 || !newValue[0] || !newValue[1]) return
    if (typeof onBeforeChange === 'function') {
      let goOn = await onBeforeChange(newValue)
      if (goOn === false) {
        return
      }
    }

    onChange && onChange(newValue)
  }

  return (
    <div className={`datepicker-rangemain-custom`}>
      <Combo
        portal={portal}
        type={type}
        value={startDate}
        max={Array.isArray(value) && value.length === 2 ? value[1] : undefined}
        onBeforeChange={(argStartDate) => {
          return validateStartDate(argStartDate)
        }}
        onChange={(argStartDate) => {
          let newStartDate = argStartDate || null
          handleChange(newStartDate || endDate ? [newStartDate, endDate] : null)
        }}
        placeholder={locale('请选择', 'ZKGJ001848')}
        allowClear={allowClear}
        ricon={<i className="ricon icon shape-arrow-right sm" style={{ marginRight: '4px' }} />}
        DatePickerModalProps={DatePickerModalProps}
      />
      —
      <Combo
        portal={portal}
        type={type}
        value={endDate}
        min={Array.isArray(value) && value.length === 2 ? value[0] : undefined}
        onBeforeChange={(argEndDate) => {
          return validateEndDate(argEndDate)
        }}
        onChange={(argEndDate) => {
          let newEndDate = argEndDate || null
          handleChange(startDate || newEndDate ? [startDate, newEndDate] : null)
        }}
        placeholder={locale('请选择', 'ZKGJ001848')}
        allowClear={allowClear}
        ricon={<i className="ricon icon shape-arrow-right sm" style={{ marginRight: '4px' }} />}
        DatePickerModalProps={DatePickerModalProps}
      />
    </div>
  )
}
